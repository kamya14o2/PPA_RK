geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2016 = B01001_001E,
totalHU2016 = B25002_001E,
totalVacant2016 = B25002_003E,
medHHIncome2016 = B19013_001E,
totalWhite2016 = B02001_002E,
totalGradDeg2016 = B06009_006E) %>%
mutate(vacancyHU2016 = totalVacant2016/totalHU2016) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
```{r ggplot_geom_sf, warning = FALSE, cache = TRUE}
ggplot()+
geom_sf(data = acsTractsPHL2016Sf, aes(fill = vacancyHU2016),
color = "transparent")+
geom_sf(data = acsTractsPHL2016Sf %>%
filter(mtAiry == "MT AIRY") %>%
st_union(),
color = "white",
fill = "transparent")+
labs(
title = "2020 Vacant Housing Units as a function of Pct Total Housing Units",
subtitle = "",
caption = "Data: US Census Bureau, ACS 5-year estimates")+
theme_minimal()
#EDIT EVERYTHING BELOW
#summary of mean number of vacant housing units per tract for Mt Airy
vacancySumTable <- allACS %>%
group_by(mtAiry) %>%
summarize(meanVacancyHU = mean(changeMedVacantHousing, na.rm = TRUE))
#summary of mean number of vacant housing units per tract for all of Philly
----------------
#kable table part
kbl(vacancySumTable) %>%
kable_styling(bootstrap_options = "striped", font_size = 9)
vacancySumTable %>%
kbl%>%
kable_styling(bootstrap_options = "striped", font_size = 9)
knitr::opts_chunk$set(echo = TRUE)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
install.packages("dplyr")
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE)
acsVariables2020 <- load_variables(2020, "acs5", cache = TRUE)
acsVariables2016 <- load_variables(2016, "acs5", cache = TRUE)
acsTractsPHL2016Sf <- get_acs(geography = "tract",
year = 2016,
variables = acsVars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2016 = B01001_001E,
totalHU2016 = B25002_001E,
totalVacant2016 = B25002_003E,
medHHIncome2016 = B19013_001E,
totalWhite2016 = B02001_002E,
totalGradDeg2016 = B06009_006E) %>%
mutate(vacancyHU2016 = totalVacant2016/totalHU2016) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
ggplot()+
geom_sf(data = acsTractsPHL2016Sf, aes(fill = vacancyHU2016),
color = "transparent")+
geom_sf(data = acsTractsPHL2016Sf %>%
filter(mtAiry == "MT AIRY") %>%
st_union(),
color = "white",
fill = "transparent")+
labs(
title = "2016 Vacant Housing Units as a function of Pct Total Housing Units",
subtitle = "",
caption = "Data: US Census Bureau, ACS 5-year estimates")+
theme_minimal()
ggplot()+
geom_sf(data = acsTractsPHL2016Sf, aes(fill = vacancyHU2016),
color = "transparent")+
geom_sf(data = acsTractsPHL2016Sf %>%
filter(mtAiry == "MT AIRY") %>%
st_union(),
color = "white",
fill = "transparent")+
labs(
title = "2016 Vacant Housing Units as a function of Pct Total Housing Units",
subtitle = "",
caption = "Data: US Census Bureau, ACS 5-year estimates")+
theme_minimal()
acsTractsPHL2016Sf <- get_acs(geography = "tract",
year = 2016,
variables = acsVars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2016 = B01001_001E,
totalHU2016 = B25002_001E,
totalVacant2016 = B25002_003E,
medHHIncome2016 = B19013_001E,
totalWhite2016 = B02001_002E,
totalGradDeg2016 = B06009_006E) %>%
mutate(vacancyHU2016 = totalVacant2016/totalHU2016) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
acsTractsPHL2016Sf <- get_acs(geography = "tract",
year = 2020,
variables = acsVars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2020 = B01001_001E,
totalHU2020 = B25002_001E,
totalVacant2020 = B25002_003E,
medHHIncome2020 = B19013_001E,
totalWhite2020 = B02001_002E,
totalGradDeg2020 = B06009_006E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
vacancySumTable <- allACS %>%
group_by(mtAiry) %>%
summarize(meanVacancyHU = mean(totalVacant2020, na.rm = TRUE))
vacancySumTable %>%
kbl%>%
kable_styling(bootstrap_options = "striped", font_size = 9)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
install.packages("dplyr")
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
install.packages("dplyr")
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
install.packages("dplyr")
install.packages("dplyr")
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
install.packages("dplyr")
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
acsVariables2020 <- load_variables(2020, "acs5", cache = TRUE)
acsVariables2016 <- load_variables(2016, "acs5", cache = TRUE)
install.packages("dplyr")
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
acsVariables2020 <- load_variables(2020, "acs5", cache = TRUE)
acsVariables2016 <- load_variables(2016, "acs5", cache = TRUE)
acsVars <- c("B01001_001E", # ACS total Pop estimate
"B25002_001E", # Estimate of total housing units
"B25002_003E", # Number of vacant housing units
"B19013_001E", # Median HH Income ($)
"B02001_002E", # People describing themselves as "white alone"
"B06009_006E") # Total graduate or professional degree)
acsTractsPhl2020 <- acsTractsPhl2020 %>%
dplyr::select(GEOID, NAME,all_of(acsVars))
acsTractsPhl2020 <- get_acs(geography = "tract",
year = 2020,
variables = acsVars,
geometry = FALSE,
state = "PA",
county = "Philadelphia",
output = "wide")
acsTractsPhl2020 <- acsTractsPhl2020 %>%
dplyr::select(GEOID, NAME,all_of(acsVars))
acsTractsPhl2020 <- acsTractsPhl2020 %>%
rename(totalPop2020 = B01001_001E,
totalHU2020 = B25002_001E,
totalVacant2020 = B25002_003E,
medHHIncome2020 = B19013_001E,
totalWhite2020 = B02001_002E,
totalGradDeg2020 = B06009_006E)
acsTractsPhl2020 <- acsTractsPhl2020 %>%
mutate(pctVacancy2020 = totalVacant2020/totalHU2020,
pctWhite = totalWhite2020/totalPop2020)
acsTractsPhl2016 <- get_acs(geography = "tract",
year= 2016,
variables = acsVars,
geometry = FALSE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select(GEOID, NAME, all_of(acsVars)) %>%
rename(totalPop2016 = B01001_001E,
totalHU2016 = B25002_001E,
totalVacant2016 = B25002_003E,
medHHIncome2016 = B19013_001E,
totalWhite2016 = B02001_002E,
totalGradDeg2016 = B06009_006E) %>%
mutate(pctVacancy2016 = totalVacant2016/totalHU2016,
pctWhite2016 = totalWhite2016/totalPop2016)
allACS <- left_join(acsTractsPhl2016, acsTractsPhl2020,
by= c("GEOID"))
allACS <- allACS %>%
mutate(changeMedHHIncome = medHHIncome2020 - (medHHIncome2016*1.08),
changeGradDegreePct = (totalGradDeg2020/totalPop2020) - (totalGradDeg2016/totalPop2016))
mean(allACS$changeMedHHIncome, na.rm = TRUE)
median(allACS$changeMedHHIncome, na.rm = TRUE)
hist(allACS$changeMedHHIncome)
ggplot(allACS) +
geom_histogram(aes(changeMedHHIncome), binwidth = 5000)+
labs(
title = "Change in Philadelphia HH median income by tract, 2016-2020",
caption = "Data: US Census Bureau, ACS 5-year estimates",
x = "Change in Med HH Income (2020 dollars)",
y="Number of tracts"  )
myTracts <- c("42101023500",
"42101023600",
"42101023700",
"42101025300",
"42101025400",
"42101025500",
"42101025600",
"42101038800")
allACS <- allACS %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
allACS <- allACS %>%
mutate(changeMedVacantHousing = totalVacant2020 - (totalVacant2016))
ggplot(allACS)+
geom_point(aes(x=totalVacant2016,
y=totalVacant2020,
color = mtAiry))+
labs(
title = "2020 Vacant Housing as a Function of 2016 Vacant Housing",
subtitle = "Revathi V. Machan",
caption = "Data: US Census Bureau, ACs 5-year estimates",
x="Vacant Housing 2016",
y="Vacant Housing 2020")
acsTractsPHL2016Sf <- get_acs(geography = "tract",
year = 2016,
variables = acsVars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2016 = B01001_001E,
totalHU2016 = B25002_001E,
totalVacant2016 = B25002_003E,
medHHIncome2016 = B19013_001E,
totalWhite2016 = B02001_002E,
totalGradDeg2016 = B06009_006E) %>%
mutate(vacancyHU2016 = totalVacant2016/totalHU2016) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
acsTractsPHL2016Sf <- get_acs(geography = "tract",
year = 2020,
variables = acsVars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2020 = B01001_001E,
totalHU2020 = B25002_001E,
totalVacant2020 = B25002_003E,
medHHIncome2020 = B19013_001E,
totalWhite2020 = B02001_002E,
totalGradDeg2020 = B06009_006E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
ggplot()+
geom_sf(data = acsTractsPHL2016Sf, aes(fill = vacancyHU2016),
color = "transparent")+
geom_sf(data = acsTractsPHL2016Sf %>%
filter(mtAiry == "MT AIRY") %>%
st_union(),
color = "white",
fill = "transparent")+
labs(
title = "2016 Vacant Housing Units as a function of Total Housing Units",
subtitle = "",
caption = "Data: US Census Bureau, ACS 5-year estimates")+
theme_minimal()
acsTractsPHL2016Sf <- get_acs(geography = "tract",
year = 2016,
variables = acsVars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2016 = B01001_001E,
totalHU2016 = B25002_001E,
totalVacant2016 = B25002_003E,
medHHIncome2016 = B19013_001E,
totalWhite2016 = B02001_002E,
totalGradDeg2016 = B06009_006E) %>%
mutate(vacancyHU2016 = totalVacant2016/totalHU2016) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
acsTractsPHL2020Sf <- get_acs(geography = "tract",
year = 2020,
variables = acsVars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2020 = B01001_001E,
totalHU2020 = B25002_001E,
totalVacant2020 = B25002_003E,
medHHIncome2020 = B19013_001E,
totalWhite2020 = B02001_002E,
totalGradDeg2020 = B06009_006E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
ggplot()+
geom_sf(data = acsTractsPHL2016Sf, aes(fill = vacancyHU2016),
color = "transparent")+
geom_sf(data = acsTractsPHL2016Sf %>%
filter(mtAiry == "MT AIRY") %>%
st_union(),
color = "white",
fill = "transparent")+
labs(
title = "2016 Vacant Housing Units as a function of Total Housing Units",
subtitle = "",
caption = "Data: US Census Bureau, ACS 5-year estimates")+
theme_minimal()
vacancySumTable <- allACS %>%
group_by(mtAiry) %>%
summarize(meanVacancyHU = mean(totalVacant2020, na.rm = TRUE))
vacancySumTable %>%
kbl%>%
kable_styling(bootstrap_options = "striped", font_size = 9)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
install.packages("tidycensus")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
install.packages("dplyr")
install.packages("tidycensus")
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
install.packages("tidycensus")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidycensus")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
install.packages("tidycensus")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
install.packages("tidycensus")
install.packages("dplyr")
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
acsVariables2020 <- load_variables(2020, "acs5", cache = TRUE)
acsVariables2016 <- load_variables(2016, "acs5", cache = TRUE)
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
chooseCRANmirror(graphics=FALSE, ind=1)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
if (!require(pacman)){install.packages("pacman"); library(pacman)}
install.packages("dplyr")
install.packages("tidycensus")
p_load (sf, tidyverse, knitr, kableExtra,rmarkdown,tidycensus, dplyr)
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
acsVariables2020 <- load_variables(2020, "acs5", cache = TRUE)
acsVariables2016 <- load_variables(2016, "acs5", cache = TRUE)
acsVars <- c("B01001_001E", # ACS total Pop estimate
"B25002_001E", # Estimate of total housing units
"B25002_003E", # Number of vacant housing units
"B19013_001E", # Median HH Income ($)
"B02001_002E", # People describing themselves as "white alone"
"B06009_006E") # Total graduate or professional degree)
acsTractsPhl2020 <- get_acs(geography = "tract",
year = 2020,
variables = acsVars,
geometry = FALSE,
state = "PA",
county = "Philadelphia",
output = "wide")
acsTractsPhl2020 <- acsTractsPhl2020 %>%
dplyr::select(GEOID, NAME,all_of(acsVars))
acsTractsPhl2020 <- acsTractsPhl2020 %>%
rename(totalPop2020 = B01001_001E,
totalHU2020 = B25002_001E,
totalVacant2020 = B25002_003E,
medHHIncome2020 = B19013_001E,
totalWhite2020 = B02001_002E,
totalGradDeg2020 = B06009_006E)
acsTractsPhl2020 <- acsTractsPhl2020 %>%
mutate(pctVacancy2020 = totalVacant2020/totalHU2020,
pctWhite = totalWhite2020/totalPop2020)
acsTractsPhl2016 <- get_acs(geography = "tract",
year= 2016,
variables = acsVars,
geometry = FALSE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select(GEOID, NAME, all_of(acsVars)) %>%
rename(totalPop2016 = B01001_001E,
totalHU2016 = B25002_001E,
totalVacant2016 = B25002_003E,
medHHIncome2016 = B19013_001E,
totalWhite2016 = B02001_002E,
totalGradDeg2016 = B06009_006E) %>%
mutate(pctVacancy2016 = totalVacant2016/totalHU2016,
pctWhite2016 = totalWhite2016/totalPop2016)
allACS <- left_join(acsTractsPhl2016, acsTractsPhl2020,
by= c("GEOID"))
allACS <- allACS %>%
mutate(changeMedHHIncome = medHHIncome2020 - (medHHIncome2016*1.08),
changeGradDegreePct = (totalGradDeg2020/totalPop2020) - (totalGradDeg2016/totalPop2016))
mean(allACS$changeMedHHIncome, na.rm = TRUE)
median(allACS$changeMedHHIncome, na.rm = TRUE)
hist(allACS$changeMedHHIncome)
ggplot(allACS) +
geom_histogram(aes(changeMedHHIncome), binwidth = 5000)+
labs(
title = "Change in Philadelphia HH median income by tract, 2016-2020",
caption = "Data: US Census Bureau, ACS 5-year estimates",
x = "Change in Med HH Income (2020 dollars)",
y="Number of tracts"  )
myTracts <- c("42101023500",
"42101023600",
"42101023700",
"42101025300",
"42101025400",
"42101025500",
"42101025600",
"42101038800")
allACS <- allACS %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
allACS <- allACS %>%
mutate(changeMedVacantHousing = totalVacant2020 - (totalVacant2016))
ggplot(allACS)+
geom_point(aes(x=totalVacant2016,
y=totalVacant2020,
color = mtAiry))+
labs(
title = "2020 Vacant Housing as a Function of 2016 Vacant Housing",
subtitle = "Revathi V. Machan",
caption = "Data: US Census Bureau, ACs 5-year estimates",
x="Vacant Housing 2016",
y="Vacant Housing 2020")
acsTractsPHL2016Sf <- get_acs(geography = "tract",
year = 2016,
variables = acsVars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2016 = B01001_001E,
totalHU2016 = B25002_001E,
totalVacant2016 = B25002_003E,
medHHIncome2016 = B19013_001E,
totalWhite2016 = B02001_002E,
totalGradDeg2016 = B06009_006E) %>%
mutate(vacancyHU2016 = totalVacant2016/totalHU2016) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
acsTractsPHL2020Sf <- get_acs(geography = "tract",
year = 2020,
variables = acsVars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acsVars)) %>%
rename (totalPop2020 = B01001_001E,
totalHU2020 = B25002_001E,
totalVacant2020 = B25002_003E,
medHHIncome2020 = B19013_001E,
totalWhite2020 = B02001_002E,
totalGradDeg2020 = B06009_006E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
ggplot()+
geom_sf(data = acsTractsPHL2016Sf, aes(fill = vacancyHU2016),
color = "transparent")+
geom_sf(data = acsTractsPHL2016Sf %>%
filter(mtAiry == "MT AIRY") %>%
st_union(),
color = "white",
fill = "transparent")+
labs(
title = "2016 Vacant Housing Units as a function of Total Housing Units",
subtitle = "",
caption = "Data: US Census Bureau, ACS 5-year estimates")+
theme_minimal()
vacancySumTable <- allACS %>%
group_by(mtAiry) %>%
summarize(meanVacancyHU = mean(totalVacant2020, na.rm = TRUE))
vacancySumTable %>%
kbl%>%
kable_styling(bootstrap_options = "striped", font_size = 9)
p_load (sf, tidyverse, knitr, kableExtra, rmarkdown, tidycensus, dplyr)
census_api_key("b3eda1fa84dde3c5ad443fd407d48f2584ab2726", overwrite = TRUE, install = TRUE)
